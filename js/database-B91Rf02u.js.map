{"version":3,"file":"database-B91Rf02u.js","sources":["../../node_modules/idb/build/index.js"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n"],"names":["instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","transactionDoneMap","WeakMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","set","value","has","replaceTraps","callback","wrapFunction","func","IDBCursor","prototype","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","request","transformCachableValue","tx","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBDatabase","IDBObjectStore","IDBIndex","Proxy","IDBRequest","promise","success","result","promisifyRequest","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","transaction","then","db","catch","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","Symbol","asyncIterator"],"mappings":"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","x_google_ignoreList":[0]}